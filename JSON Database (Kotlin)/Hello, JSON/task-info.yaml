type: edu
files:
  - name: test/JsonDatabaseTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
      
      public class JsonDatabaseTest extends StageTest<String> {
      
          private static final String OK_STATUS = "OK";
          private static final String ERROR_STATUS = "ERROR";
          private static final String NO_SUCH_KEY_REASON = "No such key";
          private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";
      
          @DynamicTest(order = 1)
          CheckResult checkExit() {
      
              TestedProgram server = getServer();
              server.startInBackground();
      
              try {
                  Thread.sleep(100);
              } catch (InterruptedException e) {
                  e.printStackTrace();
              }
      
              TestedProgram client = getClient();
              client.start("-t", "exit");
      
              try {
                  Thread.sleep(100);
              } catch (InterruptedException e) {
                  e.printStackTrace();
              }
      
              if (!server.isFinished()) {
                  server.stop();
                  return CheckResult.wrong(WRONG_EXIT);
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 2)
          CheckResult testInputs() {
      
              TestedProgram server = getServer();
              server.startInBackground();
      
              try {
                  Thread.sleep(100);
              } catch (InterruptedException e) {
                  e.printStackTrace();
              }
      
              TestedProgram client;
              String output;
              String expectedValue;
      
              client = getClient();
              output = client.start("-t", "get", "-k", "1");
      
              String requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "1")
                  );
              String responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "set")
                      .value("key", "1")
                      .value("value", "Hello world!")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "set")
                      .value("key", "1")
                      .value("value", "HelloWorld!")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-t", "get", "-k", "1");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "1")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                      .value("value", "HelloWorld!")
                  );
      
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "1");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "1")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "1");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "1")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "get", "-k", "1");
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "1")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "set", "-k", "text", "-v", "Some text here");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "set")
                      .value("key", "text")
                      .value("value", "Some text here")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-t", "get", "-k", "text");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "text")
                  );
              expectedValue = "Some text here";
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                      .value("value", expectedValue)
                  );
      
      
              client = getClient();
              output = client.start("-t", "get", "-k", "56");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "56")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "56");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "56")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "100");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "100")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "That key doesn't exist");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "That key doesn't exist")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              client.start("-t", "exit");
      
              return CheckResult.correct();
          }
      
          private static TestedProgram getClient() {
              return new TestedProgram("jsondatabase.client");
          }
      
          private static TestedProgram getServer() {
              return new TestedProgram("jsondatabase.server");
          }
      
      }
    learner_created: false
  - name: test/JsonFinder.java
    visible: false
    text: |
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;
      
      public class JsonFinder {
      
          private static final Pattern pattern = Pattern.compile("\\{.+}");
      
          public static String findRequestJsonObject(String output) {
      
              Matcher matcher = pattern.matcher(output);
      
              while (matcher.find()) {
                  String json = matcher.group();
                  if (json.contains("type")) {
                      return json;
                  }
              }
      
              throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                      "It should contain 'type' key");
          }
      
          public static String findResponseJsonObject(String output) {
      
              Matcher matcher = pattern.matcher(output);
      
              while (matcher.find()) {
                  String json = matcher.group();
                  if (json.contains("response")) {
                      return json;
                  }
              }
      
              throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                      "It should contain 'response' key");
          }
      }
    learner_created: false
  - name: src/jsondatabase/server/Server.kt
    visible: true
    text: |-
      package jsondatabase.server
      
      import java.io.DataInputStream
      import java.io.DataOutputStream
      import java.net.InetAddress
      import java.net.ServerSocket
      import java.net.Socket
      
      const val address = "127.0.0.1"
      const val port = 23456
      
      class Server {
          private val server = ServerSocket(port, 50, InetAddress.getByName(address))
          private var socket: Socket = Socket()
      //    private val input = DataInputStream(socket.getInputStream())
      //    private val output = DataOutputStream(socket.getOutputStream())
      
          fun run(){
              socket = server.accept()
          }
          fun close(){
              socket.close()
          }
      
          fun closeServer(){
              server.close()
          }
      
          fun test(){
              println("Server started!")
              val receivedString = receiveServerData()
              println("Received: $receivedString")
              if (receivedString == "Give me a record # 12"){
                  val message = "A record # 12 was sent!"
                  println("Sent: $message")
                  sendServerData(message)
              }
      
          }
      
          fun sendServerData(message: String){
              val output = DataOutputStream(socket.getOutputStream())
              output.writeUTF(message)
          }
      
          fun receiveServerData(): String{
              val input = DataInputStream(socket.getInputStream())
              return input.readUTF()
          }
      }
    learner_created: true
  - name: src/jsondatabase/client/Client.kt
    visible: true
    text: |-
      package jsondatabase.client
      
      import java.io.DataInputStream
      import java.io.DataOutputStream
      import java.net.InetAddress
      import java.net.Socket
      
      const val address = "127.0.0.1"
      const val port = 23456
      val socket = Socket(InetAddress.getByName(address), port)
      val input = DataInputStream(socket.getInputStream())
      val output = DataOutputStream(socket.getOutputStream())
      
      fun main(args: Array<String>){
          println("Client started!")
      /*    val message = "Give me a record # 12"
          sendClientData(message)
          println("Sent: $message")
          val result = receiveClientData()
          println("Received: $result")*/
      
          sendClientData(readInput(args))
          receiveClientData()
      }
      
      fun readInput(args: Array<String>): MutableList<String>{
          val list = mutableListOf<String>()
      /*    var command = ""
          var index = ""
          var message = ""*/
      
          if (args.indexOf("-t") != -1) {
              list.add(args[args.indexOf("-t") + 1])
          }
          if (args.indexOf("-i") != -1) {
              list.add(args[args.indexOf("-i") + 1])
          }
          if (args.contains("-m")) {
              list.add(args[args.indexOf("-m") + 1].trim())
          }
          return list
      }
      
      fun sendClientData(message: String){
          output.writeUTF(message)
          println("Sent: $message")
      }
      
      fun sendClientData(messageList: MutableList<String>){
          sendClientData(messageList.reduce { acc, s -> acc.plus(" $s") })
      }
      
      fun receiveClientData(): String{
          val result = input.readUTF()
      
          println("Received: $result")
          return result
      }
    learner_created: true
  - name: src/jsondatabase/server/Main.kt
    visible: true
    text: |-
      package jsondatabase.server
      
      import java.net.SocketException
      import kotlin.system.exitProcess
      import java.util.InvalidPropertiesFormatException
      
      
      private val arrayDB = Array<String>(1000){""}
      
      fun main(){
      
          readData()
      }
      
      fun inputCommand(input: String): String{
          while (true){
            //val inputLine = readln().split(" ")
              val inputLine = input.split(" ")
              var index = 0
              val commandName = inputLine[0].lowercase()
              var entriesList = listOf<String>()
      
              if (inputLine.size > 1) {
                  if (isIndexOk(inputLine[1]))
                      index = inputLine[1].toInt() - 1
                  else
                      return "ERROR"
      
                  if (commandName == "set")
                      entriesList = inputLine.subList(2, inputLine.size)
              }
      
                  // "exit" -> exitProcess(1)
             return when(commandName.lowercase()){
                  "set" -> setEntry(index, entriesList)
                  "get" -> getEntry(index)
                  "delete" -> deleteEntry(index)
                  else -> return "The input action is invalid"
              }
          }
      
      }
      
      fun setEntry(index: Int, entriesList: List<String>): String{
          val sb = StringBuilder()
          for (str in entriesList)
              sb.append("$str ")
      
          arrayDB[index] = sb.toString()
      
          return "OK"
      }
      
      fun getEntry(index: Int): String{
          return if (arrayDB[index] == "")
              "ERROR"
          else
              arrayDB[index]
      }
      
      fun deleteEntry(index: Int): String{
          arrayDB[index] = ""
          return "OK"
      }
      
      fun isIndexOk(indexStr: String): Boolean{
          try {
              val index = indexStr.toInt() - 1
      
              if (index < 0 || index > arrayDB.size - 1) {
                  throw InvalidPropertiesFormatException("")
              }
          } catch (e: Exception){
              return false
          }
          return true
      }
      
      
      fun readData(){
          val server = Server()
          println("Server started!")
      
          while (true){
              server.run()
              try {
                  val input = server.receiveServerData()
                  if (input == "exit") {
                      server.sendServerData("OK")
                      server.closeServer()
                      exitProcess(1)
                  }
                  server.sendServerData(inputCommand(input))
      
              } catch (e: SocketException) {
                  server.close()
              }
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/26262#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 06 Dec 2023 21:11:47 UTC"
record: 4
