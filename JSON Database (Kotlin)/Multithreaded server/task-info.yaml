type: edu
files:
  - name: test/JsonDatabaseTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      import org.junit.AfterClass;
      
      import java.io.File;
      import java.io.FileWriter;
      import java.io.IOException;
      import java.lang.management.ManagementFactory;
      import java.nio.file.Files;
      import java.nio.file.Path;
      import java.nio.file.Paths;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
      
      public class JsonDatabaseTest extends StageTest<String> {
      
          private static final String OK_STATUS = "OK";
          private static final String ERROR_STATUS = "ERROR";
          private static final String NO_SUCH_KEY_REASON = "No such key";
      
          private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";
      
          private static final String fileName = "db.json";
          private static final String clientDataPath = System.getProperty("user.dir") + File.separator +
              "src" + File.separator +
              "jsondatabase" + File.separator +
              "client" + File.separator +
              "data";
          private static final String dbFilePath = System.getProperty("user.dir") + File.separator +
              "src" + File.separator +
              "jsondatabase" + File.separator +
              "server" + File.separator +
              "data" + File.separator + fileName;
      
          private static int threadsCount;
      
          @DynamicTest(order = 1)
          CheckResult checkExit() {
      
              TestedProgram server = getServer();
              server.startInBackground();
      
              try {
                  Thread.sleep(100);
              } catch (InterruptedException e) {
                  e.printStackTrace();
              }
      
              TestedProgram client = getClient();
              client.start("-t", "exit");
      
              try {
                  Thread.sleep(100);
              } catch (InterruptedException e) {
                  e.printStackTrace();
              }
      
              if (!server.isFinished()) {
                  server.stop();
                  return CheckResult.wrong(WRONG_EXIT);
              }
      
              if (!Files.exists(Path.of(dbFilePath))) {
                  return CheckResult.wrong("Can't find /server/data/db.json file.");
              }
      
              try (FileWriter fileWriter = new FileWriter(new File(dbFilePath))) {
                  fileWriter.write("{}");
              } catch (IOException e) {
                  return CheckResult.wrong("Close the db.json file before starting the tests.");
              }
      
              if (!Files.exists(Paths.get(clientDataPath))) {
                  return CheckResult.correct();
              }
      
              String setRequest = JsonBuilder.newBuilder()
                  .addValue("type", "set")
                  .addValue("key", "name")
                  .addValue("value", "Kate")
                  .getAsJsonObject().toString();
      
              String getRequest = JsonBuilder.newBuilder()
                  .addValue("type", "get")
                  .addValue("key", "name")
                  .getAsJsonObject().toString();
      
              String deleteRequest = JsonBuilder.newBuilder()
                  .addValue("type", "delete")
                  .addValue("key", "name")
                  .getAsJsonObject().toString();
      
              try {
                  Files.write(Paths.get(clientDataPath + File.separator + "testSet.json"), setRequest.getBytes());
                  Files.write(Paths.get(clientDataPath + File.separator + "testGet.json"), getRequest.getBytes());
                  Files.write(Paths.get(clientDataPath + File.separator + "testDelete.json"), deleteRequest.getBytes());
              } catch (IOException e) {
                  throw new WrongAnswer("Can't create test files in /client/data/ folder.");
              }
      
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 2)
          CheckResult checkDataFolder() {
      
              if (!Files.exists(Paths.get(clientDataPath))) {
                  return CheckResult.wrong("Can't find /client/data/ folder.");
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 3)
          CheckResult testInputs() throws InterruptedException {
      
              threadsCount = getThreadCount();
              TestedProgram server = getServer();
              server.startInBackground();
      
              try {
                  Thread.sleep(100);
              } catch (InterruptedException e) {
                  e.printStackTrace();
              }
      
              TestedProgram client;
              String output;
              String expectedValue;
      
              client = getClient();
              output = client.start("-t", "get", "-k", "1");
      
              String requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "1")
                  );
              String responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "set")
                      .value("key", "1")
                      .value("value", "Hello world!")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "set")
                      .value("key", "1")
                      .value("value", "HelloWorld!")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-t", "get", "-k", "1");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "1")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                      .value("value", "HelloWorld!")
                  );
      
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "1");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "1")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "1");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "1")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "get", "-k", "1");
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "1")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "set", "-k", "text", "-v", "Some text here");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "set")
                      .value("key", "text")
                      .value("value", "Some text here")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-t", "get", "-k", "text");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "text")
                  );
              expectedValue = "Some text here";
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                      .value("value", expectedValue)
                  );
      
      
              client = getClient();
              output = client.start("-t", "get", "-k", "56");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "56")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "56");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "56")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "100");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "100")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
              client = getClient();
              output = client.start("-t", "delete", "-k", "That key doesn't exist");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "That key doesn't exist")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
      
              client = getClient();
              output = client.start("-in", "testSet.json");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "set")
                      .value("key", "name")
                      .value("value", "Kate")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
      
              client = getClient();
              output = client.start("-in", "testGet.json");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "name")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                      .value("value", "Kate")
                  );
      
              client = getClient();
              output = client.start("-in", "testDelete.json");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "delete")
                      .value("key", "name")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", OK_STATUS)
                  );
      
              client = getClient();
              output = client.start("-in", "testGet.json");
      
              requestJson = JsonFinder.findRequestJsonObject(output);
              expect(requestJson)
                  .asJson()
                  .check(isObject()
                      .value("type", "get")
                      .value("key", "name")
                  );
              responseJson = JsonFinder.findResponseJsonObject(output);
              expect(responseJson)
                  .asJson()
                  .check(isObject()
                      .value("response", ERROR_STATUS)
                      .value("reason", NO_SUCH_KEY_REASON)
                  );
              checkIfThreadWasCreated();
      
              client = getClient();
              client.start("-t", "exit");
      
              return CheckResult.correct();
          }
      
          private static TestedProgram getClient() {
              return new TestedProgram("jsondatabase.client");
          }
      
          private static TestedProgram getServer() {
              return new TestedProgram("jsondatabase.server");
          }
      
          private static int getThreadCount() {
              return (int) ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
          }
      
          private static void checkIfThreadWasCreated() {
              int total = getThreadCount();
      
               /*18 threads: 1 server thread and 17 client threads created during the test.
               If the server doesn't handle clients in a new thread then the difference between number of threads
               before and after the test should be equal 18 */
              if (total - threadsCount == 18) {
                  throw new WrongAnswer("Looks like you don't process client connection in another thread.\n" +
                      "Every client request should be parsed and handled in a separate thread!");
              }
          }
      
          @AfterClass
          public static void deleteFiles() {
              try {
                  Files.delete(Paths.get(clientDataPath + "testSet.json"));
                  Files.delete(Paths.get(clientDataPath + "testGet.json"));
                  Files.delete(Paths.get(clientDataPath + "testDelete.json"));
              } catch (IOException ignored) {
              }
          }
      }
    learner_created: false
  - name: test/JsonFinder.java
    visible: false
    text: |
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;
      
      public class JsonFinder {
      
          private static final Pattern pattern = Pattern.compile("\\{.+}");
      
          public static String findRequestJsonObject(String output) {
      
              Matcher matcher = pattern.matcher(output);
      
              while (matcher.find()) {
                  String json = matcher.group();
                  if (json.contains("type")) {
                      return json;
                  }
              }
      
              throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                  "It should contain 'type' key");
          }
      
          public static String findResponseJsonObject(String output) {
      
              Matcher matcher = pattern.matcher(output);
      
              while (matcher.find()) {
                  String json = matcher.group();
                  if (json.contains("response")) {
                      return json;
                  }
              }
      
              throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                  "It should contain 'response' key");
          }
      }
    learner_created: false
  - name: test/JsonRequestBuilder.java
    visible: false
    text: |-
      import com.google.gson.Gson;
      import com.google.gson.JsonObject;
      
      class JsonBuilder {
      
          private final Gson gson = new Gson();
          private final JsonObject jsonObject = new JsonObject();
      
          private JsonBuilder() {
          }
      
          public static JsonBuilder newBuilder() {
              return new JsonBuilder();
          }
      
          public JsonBuilder addValue(String key, String value) {
              jsonObject.addProperty(key, value);
              return this;
          }
      
          public JsonBuilder addJsonObject(String key, JsonObject object) {
              jsonObject.add(key, object);
              return this;
          }
      
          public String getAsString() {
              return jsonObject.toString();
          }
      
          public JsonObject getAsJsonObject() {
              return jsonObject;
          }
      }
    learner_created: false
  - name: src/jsondatabase/server/Server.kt
    visible: true
    text: |-
      package jsondatabase.server
      
      import java.io.DataInputStream
      import java.io.DataOutputStream
      import java.net.InetAddress
      import java.net.ServerSocket
      import java.net.Socket
      
      const val address = "127.0.0.1"
      const val port = 23456
      
      class Server {
          private val server = ServerSocket(port, 50, InetAddress.getByName(address))
          private var socket: Socket = Socket()
      //    private val input = DataInputStream(socket.getInputStream())
      //    private val output = DataOutputStream(socket.getOutputStream())
      
          fun run(){
              socket = server.accept()
          }
          fun close(){
              socket.close()
          }
      
          fun closeServer(){
              server.close()
          }
      
          fun test(){
              println("Server started!")
              val receivedString = receiveServerData()
              println("Received: $receivedString")
              if (receivedString == "Give me a record # 12"){
                  val message = "A record # 12 was sent!"
                  println("Sent: $message")
                  sendServerData(message)
              }
      
          }
      
          fun sendServerData(message: String){
              val output = DataOutputStream(socket.getOutputStream())
              output.writeUTF(message)
          }
      
          fun receiveServerData(): String{
              val input = DataInputStream(socket.getInputStream())
              return input.readUTF()
          }
      }
    learner_created: true
  - name: src/jsondatabase/client/Client.kt
    visible: true
    text: |-
      package jsondatabase.client
      
      import java.io.DataInputStream
      import java.io.DataOutputStream
      import java.net.InetAddress
      import java.net.Socket
      import kotlinx.serialization.*
      import kotlinx.serialization.json.*
      
      const val address = "127.0.0.1"
      const val port = 23456
      val socket = Socket(InetAddress.getByName(address), port)
      val input = DataInputStream(socket.getInputStream())
      val output = DataOutputStream(socket.getOutputStream())
      
      fun main(args: Array<String>){
          println("Client started!")
      /*    val message = "Give me a record # 12"
          sendClientData(message)
          println("Sent: $message")
          val result = receiveClientData()
          println("Received: $result")*/
      
       //   sendClientData(readInput(args))
      
          sendDataAsJson(readInput(args))
          receiveClientData()
      }
      
      fun readInput(args: Array<String>): MutableList<String>{
          val list = mutableListOf<String>()
      
          if (args.indexOf("-t") != -1) {
              list.add(args[args.indexOf("-t") + 1])
          }
          if (args.indexOf("-k") != -1) {
              list.add(args[args.indexOf("-k") + 1])
          }
          if (args.contains("-v")) {
              list.add(args[args.indexOf("-v") + 1].trim())
          }
          return list
      }
      
      fun sendClientData(message: String){
          output.writeUTF(message)
          println("Sent: $message")
      }
      
      fun sendClientData(messageList: MutableList<String>){
          sendClientData(messageList.reduce { acc, s -> acc.plus(" $s") })
      }
      
      fun sendDataAsJson(messageList: MutableList<String>){
          val message = mutableMapOf<String, String>()
      
          if (messageList.size >= 1) {
              message["type"] = messageList[0]
              if (messageList.size >= 2){
                  message["key"] = messageList[1]
                  if (messageList.size == 3){
                      message["value"] = messageList[2]
                  }
              }
          }
      
          sendClientData(Json.encodeToString(message))
      }
      
      fun receiveClientData(): String{
          val result = input.readUTF()
      
          println("Received: $result")
          return result
      }
    learner_created: true
  - name: src/jsondatabase/server/Main.kt
    visible: true
    text: |-
      package jsondatabase.server
      
      import java.net.SocketException
      import kotlin.system.exitProcess
      import java.util.InvalidPropertiesFormatException
      import kotlinx.serialization.*
      import kotlinx.serialization.json.*
      
      
      //private val arrayDB = Array<String>(1000){""}
      private val arrayDB = mutableMapOf<String, String>()
      
      fun main(){
      /*    val map = mutableMapOf<String, String>("1" to "First value", "2" to "second Value", "3" to "3 value")
          val serialized = Json.encodeToString(map)
          val jsonElement: JsonElement = Json.encodeToJsonElement(map)
          jsonElement.jsonObject["1"]
          Json.decodeFromJsonElement<MutableMap<String, String>>(jsonElement)
      
          println(serialized)*/
      
          readJsonData()
      }
      
      fun inputCommand(input: String): String{
          while (true){
              val inputLine = input.split(" ")
              var index = ""
              val commandName = inputLine[0].lowercase()
              var entriesList = listOf<String>()
      
              if (inputLine.size > 1) {
                  index = inputLine[1]
                  if (commandName == "set")
                      entriesList = inputLine.subList(2, inputLine.size)
              }
      
                  // "exit" -> exitProcess(1)
             return when(commandName.lowercase()){
                  "set" -> setEntry(index, entriesList)
                  "get" -> getEntry(index)
                  "delete" -> deleteEntry(index)
                  else -> return "The input action is invalid"
              }
          }
      
      }
      
      fun setEntry(index: String, entriesList: List<String>): String{
          val sb = StringBuilder()
          for (str in entriesList)
              sb.append("$str ")
      
          arrayDB[index] = sb.toString()
      
          return Json.encodeToString(mapOf("response" to "OK"))
      }
      
      fun getEntry(index: String): String{
          if (!arrayDB.containsKey(index))
              return Json.encodeToString(mapOf("response" to "ERROR", "reason" to "No such key"))
          return if (arrayDB[index] == "")
              Json.encodeToString(mapOf("response" to "ERROR"))
          else
              Json.encodeToString(mapOf("response" to "OK", "value" to arrayDB[index].toString().trim()))
      }
      
      fun deleteEntry(index: String): String{
          if (!arrayDB.containsKey(index))
              return Json.encodeToString(mapOf("response" to "ERROR", "reason" to "No such key"))
          arrayDB.remove(index)
          return Json.encodeToString(mapOf("response" to "OK"))
      }
      
      fun isIndexOk(indexStr: String): Boolean{
          return arrayDB.containsKey(indexStr)
          /*try {
              val index = indexStr.toInt() - 1
      
              if (index < 0 || index > arrayDB.size - 1) {
                  throw InvalidPropertiesFormatException("")
              }
          } catch (e: Exception){
              return false
          }
          return true*/
      }
      
      
      fun readData(){
          val server = Server()
          println("Server started!")
      
          while (true){
              server.run()
              try {
                  val input = server.receiveServerData()
                  if (input == "exit") {
                      server.sendServerData("OK")
                      server.closeServer()
                      exitProcess(1)
                  }
                  server.sendServerData(inputCommand(input))
      
              } catch (e: SocketException) {
                  server.close()
              }
          }
      }
      
      fun readJsonData(){
          val server = Server()
          println("Server started!")
      
          while (true){
              server.run()
              try {
                  val input = Json.decodeFromString<Map<String, String>>(server.receiveServerData())
      
                  val commandString = StringBuilder()
                  if (input.size >= 1) {
                      commandString.append(input["type"])
                      if (input.size >= 2){
                          commandString.append(" ${input["key"]}")
                          if (input.size == 3){
                              commandString.append(" ${input["value"]}")
                          }
                      }
                  }
                  val result = inputCommand(commandString.toString())
                  if (input["type"] == "exit") {
                      server.sendServerData(Json.encodeToString(mapOf("response" to "OK")))
                      server.closeServer()
                      exitProcess(1)
                  }
                  server.sendServerData(result)
      
              } catch (e: SocketException) {
                  server.close()
              }
          }
      }
    learner_created: true
  - name: src/jsondatabase/server/data/db.json
    visible: true
    learner_created: true
  - name: src/jsondatabase/client/data/New Text Document.txt
    visible: true
    learner_created: true
  - name: src/jsondatabase/client/data/testSet.json
    visible: true
    learner_created: true
  - name: src/jsondatabase/client/data/testDelete.json
    visible: true
    learner_created: true
  - name: src/jsondatabase/client/data/testGet.json
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/26263#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 07 Dec 2023 13:13:23 UTC"
record: 5
