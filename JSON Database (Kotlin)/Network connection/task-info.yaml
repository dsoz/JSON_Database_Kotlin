type: edu
files:
  - name: test/JsonDatabaseTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      public class JsonDatabaseTest extends StageTest<String> {
      
          private static final String CORRECT_SERVER_OUTPUT =
              "Server started!\n" +
                  "Received: Give me a record # N\n" +
                  "Sent: A record # N was sent!";
      
          private static final String CORRECT_CLIENT_OUTPUT =
              "Client started!\n" +
                  "Sent: Give me a record # N\n" +
                  "Received: A record # N was sent!";
      
          @DynamicTest(order = 1)
          CheckResult test() {
      
              TestedProgram server = new TestedProgram("jsondatabase.server");
              server.startInBackground();
      
              try {
                  Thread.sleep(100);
              } catch (InterruptedException e) {
                  e.printStackTrace();
              }
      
              String serverOutput = server.getOutput().trim();
      
              if (!serverOutput.trim().equals("Server started!")) {
                  return CheckResult.wrong("Server output should be 'Server started!' until a client connects!");
              }
      
              TestedProgram client = new TestedProgram("jsondatabase.client");
      
              String clientOutput = client.start();
              serverOutput += "\n" + server.getOutput();
      
              String[] serverOutputLines = serverOutput.split("\n");
      
              if (serverOutputLines.length != 3) {
                  return CheckResult.wrong("After the client connects to the server, the server output should contain 3 lines!");
              }
      
              String serverOutputLastLine = serverOutputLines[serverOutputLines.length - 1];
      
              if (!serverOutputLastLine.contains("Sent: A record #") || !serverOutputLastLine.contains("was sent!")) {
                  return CheckResult.wrong("Server output after client connects to the server should be:\n"
                      + CORRECT_SERVER_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + serverOutput);
              }
      
              String[] clientOutputLines = clientOutput.split("\n");
      
              if (clientOutputLines.length != 3) {
                  return CheckResult.wrong("After the client connects to the server, the client output should contain 3 lines!");
              }
      
              String clientOutputLastLine = clientOutputLines[clientOutputLines.length - 1];
      
              if (!clientOutputLastLine.contains("Received: A record #") || !clientOutputLastLine.contains("was sent!")) {
                  return CheckResult.wrong("Client output after client connects to the server should be:\n"
                      + CORRECT_CLIENT_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + clientOutput);
              }
      
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/jsondatabase/server/Main.kt
    visible: true
    text: |-
      package jsondatabase.server
      
      
      import kotlin.system.exitProcess
      import java.util.InvalidPropertiesFormatException
      
      private val arrayDB = Array<String>(100){""}
      
      fun main(){
          inputCommand()
      }
      
      fun inputCommand(){
          while (true){
              val inputLine = readln().split(" ")
              var index = 0
              val commandName = inputLine[0].lowercase()
              var entriesList = listOf<String>()
      
              if (inputLine.size > 1) {
                  if (isIndexOk(inputLine[1]))
                      index = inputLine[1].toInt() - 1
      
                  if (commandName == "set")
                      entriesList = inputLine.subList(2, inputLine.size)
              }
      
              when(commandName.lowercase()){
                  "set" -> setEntry(index, entriesList)
                  "get" -> getEntry(index)
                  "delete" -> deleteEntry(index)
                  "exit" -> exitProcess(1)
                  else -> println("The input action is invalid")
              }
          }
      
      }
      
      fun setEntry(index: Int, entriesList: List<String>){
          val sb = StringBuilder()
          for (str in entriesList)
              sb.append("$str ")
      
          arrayDB[index] = sb.toString()
      
          println("OK")
      }
      
      fun getEntry(index: Int){
          if (arrayDB[index] == "")
              println("ERROR")
          else
              println(arrayDB[index])
      }
      
      fun deleteEntry(index: Int){
          arrayDB[index] = ""
          println("OK")
      }
      
      fun isIndexOk(indexStr: String): Boolean{
          try {
              val index = indexStr.toInt() - 1
      
              if (index < 0 || index > arrayDB.size - 1) {
                  throw InvalidPropertiesFormatException("")
              }
          } catch (e: Exception){
              println("ERROR")
              return false
          }
          return true
      }
    learner_created: true
  - name: src/jsondatabase/client/Client.kt
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/26260#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 05 Dec 2023 21:48:30 UTC"
record: 2
